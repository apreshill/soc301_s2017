
---

# RStudio Tools

### All hail the <small>`mosaic`</small> package. Load as usual: <small>`library(mosaic)`</small>

### The following four functions will give us (most of) the random simulation tools we need:

> 1. `rflip()`: Flip a coin
> 1. `shuffle()`: Shuffle a set of values (akin to cards)
> 1. `do()`: Do the same thing many, many, many times
> 1. `resample()`: the swiss army knife of functions

---

## R Simulations Example

### First load up RStudio

- Create new R script file, type the following commands (not the comments), and run them in your R Console

```{r, message=FALSE, echo=TRUE}
# Load packages, including mosaic package
library(dplyr)
library(ggplot2)
library(mosaic)

# Flip a coin once. Try this multiple times:
rflip()
```

---

## R Simulations Example

```{r echo=TRUE}
# Flip a coin 10 times. Try this multiple times:
rflip(10)
```

---

## R Simulations Example

```{r echo=TRUE}
# Flip a coin 10 times, but do this 5 times. Try this multiple times
do(5) * rflip(10)
```

---

## R Simulations Example

```{r echo=TRUE}
# Flip a coin 10 times, but do this 500 times
do(500) * rflip(10)
```

---

## R Simulations Example

```{r echo=TRUE}
# Gah! There are too many rows!
simulations <- do(500) * rflip(10)
```
```{r eval=FALSE, echo=TRUE}
# We could also View() it
View(simulations)
```

---

## R Simulations Example

```{r echo=TRUE, fig.height=5}
# Plot our resulting proportions
ggplot(data = simulations, aes(x = prop)) +
  geom_histogram(binwidth = 0.1, color = "white")
```

---

## R Simulations Example

```{r echo=TRUE, fig.height=5}
# Plot our resulting proportions
ggplot(data = simulations, mapping = aes(x = factor(prop))) +
  geom_bar()
```


---


## Shuffling AKA Permuting

Shuffling AKA re-ordering AKA **permuting** are all synonyms. I'm going to use
all three terms interchangeably. 

Type the following code into your R script:

```{r, eval=FALSE}
library(mosaic)
# Define a vector fruit
fruit <- c("apple", "orange", "mango")

# Do this multiple times:
shuffle(fruit)
```

---


## Shuffling AKA Permuting

This works with the `do()` operator...

```{r, eval=FALSE}
do(5) * shuffle(fruit)
```

... as well as within a `mutate()`



```{r, eval=FALSE}
example_data <- data_frame(
  name = c("Ilana", "Abbi", "Hannibal"),
  fruit = c("apple", "orange", "mango")
)

# Run this multiple times: 
example_data %>% mutate(fruit = shuffle(fruit))
```

---

## Key Distinction

A *huge* distinction in types of sampling:

1. Sampling **with** replacement
1. Sampling **without** replacement

---

## Resampling

### At its most basic, `resample()` resamples the input vector **with** replacement. Run this in the console multiple times from your R script:

```{r, eval=FALSE}
resample(fruit)
```

* You can get the same fruit all three times i.e. sampling with replacement
* `resample()` has default settings that we can set to fit our needs; it is a swiss army knife.
* Let's unpack the defaults:

---


## Resampling

```{r, eval=FALSE}
resample(x = fruit, size = length(x), replace = TRUE, 
         prob = rep(1 / length(x), times = length(x)) )
```

* <small>`x`</small> is the input. In this case <small>`fruit`</small>.
* <small>`size`</small>: size of output vector. By default the same size as <small>`x`</small>.
* <small>`replace`</small>: Sample **with** or **without** replacement. By default with replacement.
* <small>`prob`</small>: Probability of sampling each input value. By default, equal probability
* Run the following.  What does it do?

```{r eval=FALSE}
rep(1/length(fruit), times = length(fruit))
```

---